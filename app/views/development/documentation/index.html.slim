div.row
  div.col-md-1
  div.col-md-10
    br
    div
      h1 DEVELOPER GUIDE
      p This developer guide was made in order to assist developers for the North Sea Parts Information System. Take note that this developer guide is ALWAYS a work in progress; and if there are inconsistencies, it is imperative to inform head developer.

    hr
    div
      h2 Training and Prerequisites
      p The developer is expected to have good knowledge and principles in MVC (Model-View-Controller) Systems.
      p Following are the basic technologies used and need to be learned in order to perform modifications and add features to the application
      ul
        li Ruby-on-Rails 5
        li Coffeescript
        li HTML.SLIM
        li SASS
        li Bootstrap
      p These can be learned through the head developer; who should provide a tutorial on the Rails 5 Framework. Everything else should be learned through the internet.
      p In addition the following skills should be considered as good starting points for those new to Rails or those coming from different languages
      ul
        li Ability to make a model with associations
        li Ability to implement a Gem
        li Ability to make models with polymorphic attributes and be able to properly do a CRUD with these types of models
        li Ability to convert jquery / javascript code into coffeescript
        li Ability to use Ruby Shortcuts in a fashionable and appropriate way
        li Ability to use the Rails Command Line

      p These are considered benchmarks in order to understand codebase well.

    hr
    div
      h2 Getting Started in Running the Application
      p Ask Head Developer to grant access to the [ #{link_to 'Github Repository','https://github.com/joojieman/northseapartsthree/'} ] and the [ #{link_to 'Trello Board','https://trello.com/b/ncleviyn/northseaparts'} ] for task assignment. Once you've downloaded from the Repository; Install the following:
      ul
        li MySQL
        li IDE ( RubyMine )
        li Ruby Version 2.3.1p112
      p In order to run the application :
      ul
        li For Solr : rake sunspot:solr:run or sunspot:solr:start (linux)
        li For DB : rake db:drop db:create db:migrate db:seed sunspot:reindex
        li For Puma : rails s

      p Ask the Secret Key from Head Developer; to be put in config/env_provider.yml
      p Credentials for development are :
      ul
        li developer_one@gmail.com
        li ilovetess

    hr
    div
      h2 Developing for the Application
      p Given your assignment; you should know where to place it before executing orders. A sample of each kind of development asset can be found in the following directories:
      div

        h3 Routes File
        p Examine the routes file. It is kept extremely DRY because of previous development conditions. Please follow the format throughout when making a new development module or functionality. You will find the 'Helpers' section particularly useful when declaring routes automatically. You should always set your routes in the routes.rb before you develop a new feature as you will need the variables generated from it. You can look at the route you've generated by going to [ #{link_to 'Current Routes','localhost:3000/routes'} ]. Develop and put your route in the associated namespace or location.
        p Note that if you are going to put a resource route with a namespace; it can only work by putting the namespace and it's contents first before doing the route. This is required because the route tracer will go through the namespace content first before treating anything as id's.

        h3 Generating a Resource
        p A resource is defined as a model which has a corresponding controller and view providing CRUD Functionality. The ' Resource ' includes the model, it's controller and it's CRUD interface. Run the command for generating a model :
        p align='center' rails g model <your_namespaced_controller>
        p This will generate a migration and a model.

        h4 <b>Developing the Migration</b> :
        p Your Migration is automatically generated. In this application it is customary to use UUID for every model and you should therefore set id to false. Use the System Account Migration as an example reference.
        p Include and read the CommonColumns module - 'common_columns.rb' ; these contain columns which have already been preset. Take only what you need from here.
        p ' common_set(t) ' should >always be included in every migration that you make.
        p If you are to make your own column and for a string; please follow the following constraints for the character limit :
        br
        table
          thead
            tr
              th Expected Input
              th Number of Characters
          tbody
            tr
              td Words
              td 128
            tr
              td Statements or Sentences
              td 256
            tr
              td Paragraphs
              td 512
        br
        p Take note for implied dates or time; implemented_at is a 'datetime' and implemented_on is a 'date'
        p Other than that you are free to make any reasonable constraint as you please.

        h4 <b>Developing the Model</b> :
        p Always include generic_resource_common.rb; this will allow you to setup variables for your model for some automation. The important function here is 'setup_model'. Read the comments and the requirements; some already have default attributes. Use this in your model. For this method you will already need to setup your controller. Do this command with the corresponding namespace assigned :
        p align='center' rails g controller <your_namespaced_controller>
        p You will find shortcuts and everything you need in creating a model in 'app/model/concerns'. Use this library for DRY-ness for common attributes such as remarks, labels and names.

        h4 <b>Seeds File</b> :
        p You can finally put your model in the seeds file. Study the [ #{link_to 'Faker Library','https://github.com/stympy/faker'} ] for generating fake data. You are free to generate any helper methods here to - just put in correct section. Reseed using :
        p align='center' rake db:drop db:create db:migrate db:seed sunspot:reindex

        h4 <b>Developing the Controller</b> :
        p Resource Controllers must inherit from 'GenericResourceController'. See vehicles_controller.rb. There are

        h4 <b>Developing the Views</b> :
        p There are two views that need to be developed for every resource; the cell and the form. These are partials; so put them in the appropriate view directory with and underscore (see views in system_account as an example).
        p Use 'resource_form_helper.rb' for some shortcuts for forms and cell_helper.rb for some shortcuts in the cells.

        h3 Generating a Report
        p A report is defined as a mechanism for displaying model data, processing that data and outputting it either through a table or chart; through the use of inputs.

        h3 Generating a Dashboard
        p A dasbhoard is simply a set of preset reports. There should be no inputs. It is to show a summary of the current state of a module.

        h3 Generating a Control Desk
        p A Control Desk shows input; much like any form. However, it also shows an output based on that input and that output is actually a form; to which it can be modified through the user interface and be submitted again. It is a form within a form, a control panel.

        h3 Generating a Generic Form
        p Defined as a form for multiple models

        h3 Generating a Wizard
        p The use of wizards is restricted to the following :
        ul
          li If the form encompasses multiple models.
          li if the user needs to fill up a form but needs additional information halfway in order to assess what is needed next.

        h3 Adding your Feature to the Main Menu


  div.col-md-1